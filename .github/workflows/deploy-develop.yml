name: (CI/CD) Deploy Para Ambiente de Homologa√ß√£o

on:
  pull_request:
    branches: [develop]

jobs:
  build-and-deploy:
    environment: app-personal-contact-develop
    runs-on: [self-hosted, develop-runner]

    steps:
    - name: Limpar workspace do self-hosted runner
      run: |
        echo "üßπ Limpando workspace anterior..."
        rm -rf ./* ./.* 2>/dev/null || true
        echo "‚úÖ Workspace limpo"

    - name: Checkout do c√≥digo
      uses: actions/checkout@v4
      with: 
        fetch-depth: 0
        clean: true
        token: ${{ secrets.PAT_TOKEN }}

    - name: Configurar Git para versionamento
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions Bot"
        git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git

    - name: Configurar branch local corretamente
      run: |
        echo "üîß Configurando branch local..."
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Branch do PR: $BRANCH_NAME"
        
        git fetch origin
        git checkout -B "$BRANCH_NAME" "origin/$BRANCH_NAME"
        git branch --set-upstream-to="origin/$BRANCH_NAME" "$BRANCH_NAME"
        
        echo "‚úÖ Branch $BRANCH_NAME configurada"

    - name: Determinar tipo de versionamento baseado na branch
      id: version-type
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        echo "üîç Analisando branch: $BRANCH_NAME"
        
        if [[ "$BRANCH_NAME" == feature/* ]]; then
          echo "type=minor" >> $GITHUB_OUTPUT
          echo "release_type=develop" >> $GITHUB_OUTPUT
          echo "description=Nova funcionalidade" >> $GITHUB_OUTPUT
          echo "emoji=‚ú®" >> $GITHUB_OUTPUT
          echo "üÜï Detectado: Nova funcionalidade (MINOR-DEVELOP)"
        elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "release_type=develop" >> $GITHUB_OUTPUT
          echo "description=Corre√ß√£o de bug" >> $GITHUB_OUTPUT
          echo "emoji=üêõ" >> $GITHUB_OUTPUT
          echo "üêõ Detectado: Corre√ß√£o (PATCH-DEVELOP)"
        elif [[ "$BRANCH_NAME" == release/* ]]; then
          echo "type=minor" >> $GITHUB_OUTPUT
          echo "release_type=beta" >> $GITHUB_OUTPUT
          echo "description=Release candidate" >> $GITHUB_OUTPUT
          echo "emoji=üöÄ" >> $GITHUB_OUTPUT
          echo "üöÄ Detectado: Release candidate (MINOR-BETA)"
        else
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "release_type=alpha" >> $GITHUB_OUTPUT
          echo "description=Atualiza√ß√£o experimental" >> $GITHUB_OUTPUT
          echo "emoji=‚öôÔ∏è" >> $GITHUB_OUTPUT
          echo "‚öôÔ∏è Detectado: Branch personalizada (PATCH-ALPHA)"
        fi

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # --- VERSIONAMENTO FRONTEND CORPORATIVO ---
    - name: Instalar depend√™ncias do frontend
      working-directory: ./frontend
      run: npm install

    - name: Configurar standard-version no frontend
      working-directory: ./frontend
      run: |
        if ! npm list standard-version > /dev/null 2>&1; then
          npm install --save-dev standard-version
        fi

    - name: Versionamento Frontend Corporativo (${{ steps.version-type.outputs.description }})
      working-directory: ./frontend
      run: |
        echo "üìã Aplicando versionamento corporativo no frontend..."
        echo "Tipo: ${{ steps.version-type.outputs.type }}"
        echo "Release: ${{ steps.version-type.outputs.release_type }}"
        
        if [[ "${{ steps.version-type.outputs.release_type }}" == "develop" ]]; then
          npm run release:develop -- ${{ steps.version-type.outputs.type }} --skip.tag --no-verify
        elif [[ "${{ steps.version-type.outputs.release_type }}" == "beta" ]]; then
          npm run release:beta -- ${{ steps.version-type.outputs.type }} --skip.tag --no-verify
        else
          npm run release:alpha -- ${{ steps.version-type.outputs.type }} --skip.tag --no-verify
        fi

    # --- VERSIONAMENTO BACKEND CORPORATIVO ---
    - name: Instalar depend√™ncias do backend
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install bump2version
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi

    - name: Versionamento Backend Corporativo (${{ steps.version-type.outputs.description }})
      working-directory: ./backend
      run: |
        echo "üìã Aplicando versionamento corporativo no backend..."
        
        # Determinar comando baseado no tipo de release
        if [[ "${{ steps.version-type.outputs.release_type }}" == "develop" ]]; then
          bump2version ${{ steps.version-type.outputs.type }} --allow-dirty --new-version-part release --new-version-value develop
        elif [[ "${{ steps.version-type.outputs.release_type }}" == "beta" ]]; then
          bump2version ${{ steps.version-type.outputs.type }} --allow-dirty --new-version-part release --new-version-value beta
        else
          bump2version ${{ steps.version-type.outputs.type }} --allow-dirty --new-version-part release --new-version-value alpha
        fi

    # --- CRIAR TAGS GIT CORPORATIVAS ---
    - name: Criar tag corporativa
      id: tag
      run: |
        FRONTEND_VERSION=$(cd frontend && node -p "require('./package.json').version" 2>/dev/null || echo 'N/A')
        BACKEND_VERSION=$(cd backend && grep 'version = ' pyproject.toml | cut -d'"' -f2 | head -1 2>/dev/null || echo 'N/A')
        
        # Usar a vers√£o do frontend como refer√™ncia principal
        TAG_NAME="v${FRONTEND_VERSION}"
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "frontend_version=$FRONTEND_VERSION" >> $GITHUB_OUTPUT
        echo "backend_version=$BACKEND_VERSION" >> $GITHUB_OUTPUT
        
        echo "üè∑Ô∏è Tag que ser√° criada: $TAG_NAME"

    # --- COMMIT CORPORATIVO ---
    - name: Commit corporativo das altera√ß√µes
      run: |
        git add .
        if ! git diff --cached --quiet; then
          # Commit seguindo Conventional Commits
          git commit -m "${{ steps.version-type.outputs.emoji }} chore(release): bump versions to ${{ steps.tag.outputs.frontend_version }}

          ${{ steps.version-type.outputs.description }}
          
          üì¶ Versionamento corporativo:
          ‚Ä¢ Frontend: ${{ steps.tag.outputs.frontend_version }}
          ‚Ä¢ Backend: ${{ steps.tag.outputs.backend_version }}
          ‚Ä¢ Ambiente: ${{ steps.version-type.outputs.release_type }}
          ‚Ä¢ Tipo: ${{ steps.version-type.outputs.type }}
          ‚Ä¢ Branch: ${{ github.head_ref }}
          
          Co-authored-by: GitHub Actions <actions@github.com>"
          
          echo "‚úÖ Commit corporativo criado"
        fi

    - name: Push corporativo e criar tag
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        
        # Push para a branch do PR
        git push origin "$BRANCH_NAME"
        
        # Criar tag local (ser√° enviada para o reposit√≥rio quando merger)
        git tag -a "${{ steps.tag.outputs.tag_name }}" -m "${{ steps.version-type.outputs.emoji }} Release ${{ steps.tag.outputs.tag_name }}

        üöÄ Deploy ${{ steps.version-type.outputs.description }}
        ‚Ä¢ Frontend: ${{ steps.tag.outputs.frontend_version }}
        ‚Ä¢ Backend: ${{ steps.tag.outputs.backend_version }}
        ‚Ä¢ Ambiente: Homologa√ß√£o (${{ steps.version-type.outputs.release_type }})
        ‚Ä¢ Data: $(date '+%d/%m/%Y %H:%M')
        
        Criado automaticamente pelo GitHub Actions"
        
        echo "‚úÖ Versionamento corporativo conclu√≠do!"
        echo "üì¶ Frontend: ${{ steps.tag.outputs.frontend_version }}"
        echo "üì¶ Backend: ${{ steps.tag.outputs.backend_version }}"
        echo "üè∑Ô∏è Tag local criada: ${{ steps.tag.outputs.tag_name }}"

    # --- CONTINUA COM SEU DOCKER BUILD E DEPLOY ATUAL ---
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker image
      run: |
        echo "üêç Buildando Backend Python..."
        docker build -t contacts-backend-homolog:latest ./backend

    - name: Build Frontend Docker image  
      run: |
        echo "‚öõÔ∏è Buildando Frontend..."
        docker build -t contacts-frontend-homolog:latest \
          --build-arg REACT_APP_API_BASE_URL=http://contacts-backend-homolog:${{ secrets.BACKEND_PORT_DEV }}/api \
          ./frontend

    - name: Deploy para homologa√ß√£o
      run: |
        echo "üöÄ Fazendo deploy corporativo para homologa√ß√£o..."
        
        docker stop contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true
        docker rm contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true

        # PostgreSQL
        docker run --restart unless-stopped -d --name contacts-db-homolog \
          -e POSTGRES_USER=${{ secrets.POSTGRES_USER_DEV }} \
          -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_DEV }} \
          -e POSTGRES_DB=${{ secrets.POSTGRES_DB_DEV }} \
          -v contacts_data_homolog:/var/lib/postgresql/data \
          postgres:13-alpine

        sleep 15

        # Backend
        docker run --restart unless-stopped -d --name contacts-backend-homolog \
          -p ${{ secrets.BACKEND_PORT_DEV }}:${{ secrets.BACKEND_PORT_DEV }} \
          --env PORT=${{ secrets.BACKEND_PORT_DEV }} \
          --env DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER_DEV }}:${{ secrets.POSTGRES_PASSWORD_DEV }}@contacts-db-homolog:5432/${{ secrets.POSTGRES_DB_DEV }} \
          --env JWT_SECRET=${{ secrets.JWT_SECRET_DEV }} \
          --env JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN_DEV }} \
          --link contacts-db-homolog:contacts-db-homolog \
          contacts-backend-homolog:latest

        # Frontend  
        docker run --restart unless-stopped -d --name contacts-frontend-homolog \
          -p 80:80 \
          --link contacts-backend-homolog:app \
          contacts-frontend-homolog:latest

    - name: Verificar deploy corporativo
      run: |
        echo "üìä Status do deploy corporativo:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        echo ""
        echo "üéâ Deploy corporativo de homologa√ß√£o conclu√≠do!"
        echo "üì¶ Vers√µes deployadas:"
        echo "   Frontend: ${{ steps.tag.outputs.frontend_version }}"
        echo "   Backend: ${{ steps.tag.outputs.backend_version }}"
        echo "   Tag: ${{ steps.tag.outputs.tag_name }}"
        echo "   Ambiente: ${{ steps.version-type.outputs.release_type }}"
        echo "   Tipo: ${{ steps.version-type.outputs.description }}"
        echo ""
        echo "üîÑ Pr√≥ximos passos:"
        echo "   1. ‚úÖ Testar a aplica√ß√£o no ambiente de homologa√ß√£o"
        echo "   2. ‚úÖ Fazer o merge manual do PR no GitHub"
        echo "   3. ‚úÖ A tag ser√° enviada automaticamente ap√≥s o merge"

    - name: Limpeza
      run: |
        docker image prune -f || true
