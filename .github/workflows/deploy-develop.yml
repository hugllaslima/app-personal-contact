name: Deploy Para Ambiente de Homologa√ß√£o

on:
  pull_request:
    branches:
    - develop

jobs:
  deploy-develop:
    runs-on: [self-hosted, develop-runner]

    steps:
    - name: Limpar workspace do self-hosted runner
      run: |
        echo "üßπ Limpando workspace anterior..."
        pwd
        rm -rf ./* ./.* 2>/dev/null || true
        echo "‚úÖ Workspace limpo"
        
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4
      with: 
        fetch-depth: 0
        clean: true

    - name: Verificar estrutura do projeto
      run: |
        echo "üìÇ Verificando estrutura do projeto..."
        ls -la
        echo ""
        echo "üìÅ Backend directory (Python):"
        ls -la backend/
        echo ""
        echo "üìÅ Frontend directory (Node.js):"  
        ls -la frontend/
        echo "‚úÖ Estrutura verificada com sucesso"

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # --- In√≠cio das Etapas de Versionamento Autom√°tico ---

    # BACKEND PYTHON - Instalar depend√™ncias
    - name: Instalar depend√™ncias do backend Python
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        # Ajuste conforme seu projeto:
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        elif [ -f "pyproject.toml" ]; then
          pip install .
        fi

    # BACKEND PYTHON - Versionamento (vamos deixar comentado por enquanto)
    - name: Gerar nova vers√£o para o backend Python
      working-directory: ./backend
      run: |
        echo "‚ö†Ô∏è  Versionamento Python ainda n√£o configurado"
        echo "Configure conforme sua ferramenta (poetry, bump2version, etc.)"

    # FRONTEND NODE.JS - Instalar depend√™ncias
    - name: Instalar depend√™ncias do frontend para versionamento
      working-directory: ./frontend
      run: npm install

    # FRONTEND - Instalar standard-version se n√£o estiver no package.json
    - name: Verificar e instalar standard-version no frontend
      working-directory: ./frontend
      run: |
        if ! npm list standard-version > /dev/null 2>&1; then
          echo "üì¶ Instalando standard-version..."
          npm install --save-dev standard-version
        else
          echo "‚úÖ standard-version j√° est√° instalado"
        fi

    # FRONTEND - Verificar se script release existe, se n√£o, cri√°-lo
    - name: Configurar script de release no frontend
      working-directory: ./frontend
      run: |
        if ! npm run release --silent 2>/dev/null; then
          echo "üìù Adicionando script release ao package.json..."
          npm pkg set scripts.release="standard-version"
        fi

    - name: Gerar nova vers√£o para o frontend
      working-directory: ./frontend
      run: npm run release -- --prerelease develop --skip.tag --no-verify

    - name: Configurar Git para commit de vers√£o
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"

    - name: Commitar as novas vers√µes e CHANGELOGs
      run: |
        git add .
        git commit -m "chore(release): [skip ci] versionamento autom√°tico para develop"

    - name: Push das altera√ß√µes de vers√£o e tags
      run: |
        git push origin develop
        git push --tags origin develop

    # --- Fim das Etapas de Versionamento Autom√°tico ---

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Backend Docker image (Python)
      run: |
        docker build -t contacts-backend-homolog:latest ./backend
         
    - name: Build and push Frontend Docker image (Node.js)
      run: |
        docker build -t contacts-frontend-homolog:latest --build-arg REACT_APP_API_BASE_URL=http://contacts-backend-homolog:${{ secrets.BACKEND_PORT_DEV }}/api ./frontend

    - name: Parar e remover containers antigos
      run: |
        docker stop contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true
        docker rm contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true

    - name: Subir novos containers
      run: |
        # PostgreSQL
        docker run -d --name contacts-db-homolog \
          -e POSTGRES_USER=${{ secrets.POSTGRES_USER_DEV }} \
          -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_DEV }} \
          -e POSTGRES_DB=${{ secrets.POSTGRES_DB_DEV }} \
          -v contacts_data_homolog:/var/lib/postgresql/data \
          postgres:13-alpine

        # Backend Python
        docker run -d --name contacts-backend-homolog \
          -p ${{ secrets.BACKEND_PORT_DEV }}:${{ secrets.BACKEND_PORT_DEV }} \
          --env PORT=${{ secrets.BACKEND_PORT_DEV }} \
          --env DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER_DEV }}:${{ secrets.POSTGRES_PASSWORD_DEV }}@contacts-db-homolog:5432/${{ secrets.POSTGRES_DB_DEV }} \
          --env JWT_SECRET=${{ secrets.JWT_SECRET_DEV }} \
          --env JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN_DEV }} \
          --link contacts-db-homolog:contacts-db-homolog \
          contacts-backend-homolog:latest

        # Frontend Node.js
        docker run -d --name contacts-frontend-homolog -p 80:80 contacts-frontend-homolog:latest
         
        echo "üöÄ Deployment para o ambiente de Homologa√ß√£o conclu√≠do!"

    - name: Remover imagens antigas
      run: |
        docker rmi contacts-backend-homolog:latest contacts-frontend-homolog:latest || true

    - name: Verifica√ß√£o de status das imagens Docker
      run: |
        echo "üìä Status dos containers:"
        docker ps -a
        echo ""
        echo "üéâ Deployment para o ambiente de Homologa√ß√£o conclu√≠do com sucesso!"
