# =========================================================================
# WORKFLOW: Deploy para Ambiente de Homologa√ß√£o
# =========================================================================
# Este workflow executa valida√ß√µes em PRs para a branch develop,
# e realiza versionamento, build e deploy apenas em push para develop.
# =========================================================================

name: (CI/CD) Deploy Para Ambiente de Homologa√ß√£o

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [develop]

jobs:
  build-and-deploy:
    environment: app-personal-contact-develop
    runs-on: [self-hosted, develop-runner]

    steps:
    # =========================================================================
    # PREPARA√á√ÉO DO AMBIENTE
    # =========================================================================
    
    # Limpa o workspace para evitar conflitos com execu√ß√µes anteriores
    - name: Limpar workspace
      run: rm -rf ./* ./.* 2>/dev/null || true

    # Checkout do c√≥digo com token de acesso para permitir commits
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4
      with: 
        fetch-depth: 0  # Hist√≥rico completo para versionamento
        clean: true
        token: ${{ secrets.PAT_TOKEN_DEV }}

    # Configura o Git para realizar commits automatizados
    - name: Configurar Git
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions Bot"
        git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN_DEV }}@github.com/${{ github.repository }}.git

    # Configura a branch local para trabalhar com a branch do PR
    - name: Configurar branch local
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        git fetch origin
        git checkout -B "$BRANCH_NAME" "origin/$BRANCH_NAME"
        git branch --set-upstream-to="origin/$BRANCH_NAME" "$BRANCH_NAME"

    # =========================================================================
    # AN√ÅLISE DE VERSIONAMENTO
    # =========================================================================
    
    # Determina o tipo de versionamento baseado no evento/branch
    - name: Determinar tipo de versionamento
      id: version-type
      run: |
        EVENT_NAME="${{ github.event_name }}"
        if [[ "$EVENT_NAME" == "pull_request" ]]; then
          BRANCH_NAME="${{ github.head_ref }}"
          if [[ "$BRANCH_NAME" == feature/* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "release_type=develop" >> $GITHUB_OUTPUT
            echo "description=Nova funcionalidade" >> $GITHUB_OUTPUT
            echo "emoji=‚ú®" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "release_type=develop" >> $GITHUB_OUTPUT
            echo "description=Corre√ß√£o de bug" >> $GITHUB_OUTPUT
            echo "emoji=üêõ" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == release/* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "release_type=beta" >> $GITHUB_OUTPUT
            echo "description=Release candidate" >> $GITHUB_OUTPUT
            echo "emoji=üöÄ" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "release_type=develop" >> $GITHUB_OUTPUT
            echo "description=Atualiza√ß√£o experimental" >> $GITHUB_OUTPUT
            echo "emoji=‚öôÔ∏è" >> $GITHUB_OUTPUT
          fi
        else
          # Evento push para develop: fallback seguro baseado no √∫ltimo commit de merge
          MERGE_SUBJECT=$(git log -1 --pretty=%s || echo "")
          if echo "$MERGE_SUBJECT" | grep -qiE "hotfix/|chore\(hotfix\)|hotfix"; then
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "description=Corre√ß√£o de bug" >> $GITHUB_OUTPUT
            echo "emoji=üêõ" >> $GITHUB_OUTPUT
          elif echo "$MERGE_SUBJECT" | grep -qiE "feature/|feat|feature"; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "description=Nova funcionalidade" >> $GITHUB_OUTPUT
            echo "emoji=‚ú®" >> $GITHUB_OUTPUT
          elif echo "$MERGE_SUBJECT" | grep -qiE "release/|release"; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "description=Release candidate" >> $GITHUB_OUTPUT
            echo "emoji=üöÄ" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "description=Atualiza√ß√£o incremental" >> $GITHUB_OUTPUT
            echo "emoji=‚öôÔ∏è" >> $GITHUB_OUTPUT
          fi
          # Ambiente sempre develop em push para develop
          echo "release_type=develop" >> $GITHUB_OUTPUT
        fi

    # =========================================================================
    # CONFIGURA√á√ÉO DE AMBIENTES
    # =========================================================================
    
    # Configura Python para o backend
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Configura Node.js para o frontend
    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # =========================================================================
    # VERSIONAMENTO FRONTEND
    # =========================================================================
    
    # Instala depend√™ncias do frontend
    - name: Instalar depend√™ncias do frontend
      working-directory: ./frontend
      run: npm install

    # Garante que standard-version est√° instalado (apenas em push)
    - name: Configurar standard-version
      if: ${{ github.event_name == 'push' }}
      working-directory: ./frontend
      run: |
        if ! npm list standard-version > /dev/null 2>&1; then
          npm install --save-dev standard-version
        fi

    # Aplica o versionamento no frontend baseado no tipo (apenas em push)
    - name: Versionamento Frontend
      if: ${{ github.event_name == 'push' }}
      working-directory: ./frontend
      run: |
        if [[ "${{ steps.version-type.outputs.release_type }}" == "develop" ]]; then
          npm run release:develop -- ${{ steps.version-type.outputs.type }} --skip.tag --no-verify
        elif [[ "${{ steps.version-type.outputs.release_type }}" == "beta" ]]; then
          npm run release:beta -- ${{ steps.version-type.outputs.type }} --skip.tag --no-verify
        else
          npm run release:alpha -- ${{ steps.version-type.outputs.type }} --skip.tag --no-verify
        fi

    # =========================================================================
    # VERSIONAMENTO BACKEND
    # =========================================================================
    
    # Instala depend√™ncias do backend
    - name: Instalar depend√™ncias do backend
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install bump2version
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi

    # Aplica o versionamento no backend (apenas em push)
    - name: Versionamento Backend
      if: ${{ github.event_name == 'push' }}
      working-directory: ./backend
      run: |
        echo "üìã Aplicando versionamento no backend..."
        CURRENT_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2 | head -1)
        echo "üì¶ Vers√£o atual: $CURRENT_VERSION"
        if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
          echo "‚ö†Ô∏è Adicionando se√ß√£o Unreleased ao CHANGELOG..."
          echo -e "## [Unreleased]\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
        fi
        bump2version --current-version "$CURRENT_VERSION" ${{ steps.version-type.outputs.type }} --allow-dirty
        NEW_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2 | head -1)
        echo "‚úÖ Nova vers√£o do backend: $NEW_VERSION"
        
    # =========================================================================
    # GERENCIAMENTO DE TAGS
    # =========================================================================
    
    # Cria tag baseada nas vers√µes atualizadas (apenas em push)
    - name: Criar tag
      if: ${{ github.event_name == 'push' }}
      id: tag
      run: |
        FRONTEND_VERSION=$(cd frontend && node -p "require('./package.json').version" 2>/dev/null || echo 'N/A')
        BACKEND_VERSION=$(cd backend && grep 'version = ' pyproject.toml | cut -d'"' -f2 | head -1 2>/dev/null || echo 'N/A')
        TAG_NAME="v${FRONTEND_VERSION}"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "frontend_version=$FRONTEND_VERSION" >> $GITHUB_OUTPUT
        echo "backend_version=$BACKEND_VERSION" >> $GITHUB_OUTPUT

    # =========================================================================
    # COMMIT E PUSH
    # =========================================================================
    
    # Realiza commit das altera√ß√µes de versionamento (apenas em push)
    - name: Commit das altera√ß√µes
      if: ${{ github.event_name == 'push' }}
      run: |
        git add .
        if ! git diff --cached --quiet; then
          git commit -m "${{ steps.version-type.outputs.emoji }} chore(release): bump versions to ${{ steps.tag.outputs.frontend_version }}\n\n          ${{ steps.version-type.outputs.description }}\n\n          üì¶ Versionamento:\n          ‚Ä¢ Frontend: ${{ steps.tag.outputs.frontend_version }}\n          ‚Ä¢ Backend: ${{ steps.tag.outputs.backend_version }}\n          ‚Ä¢ Ambiente: ${{ steps.version-type.outputs.release_type }}\n          ‚Ä¢ Tipo: ${{ steps.version-type.outputs.type }}\n          ‚Ä¢ Branch: ${{ github.ref_name }}\n          \n          Co-authored-by: GitHub Actions <actions@github.com>"
        fi

    # Push das altera√ß√µes e cria√ß√£o da tag (apenas em push)
    - name: Push e criar tag
      if: ${{ github.event_name == 'push' }}
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        git push origin "$BRANCH_NAME"
        git tag -a "${{ steps.tag.outputs.tag_name }}" -m "${{ steps.version-type.outputs.emoji }} Release ${{ steps.tag.outputs.tag_name }}\n\n        üöÄ Deploy ${{ steps.version-type.outputs.description }}\n        ‚Ä¢ Frontend: ${{ steps.tag.outputs.frontend_version }}\n        ‚Ä¢ Backend: ${{ steps.tag.outputs.backend_version }}\n        ‚Ä¢ Ambiente: Homologa√ß√£o (${{ steps.version-type.outputs.release_type }})\n        ‚Ä¢ Data: $(date '+%d/%m/%Y %H:%M')\n        \n        Criado automaticamente pelo GitHub Actions"
        git push origin --tags

    # =========================================================================
    # BUILD E DEPLOY
    # =========================================================================
    
    # Configura Docker Buildx para builds otimizados (apenas em push)
    - name: Configurar Docker Buildx
      if: ${{ github.event_name == 'push' }}
      uses: docker/setup-buildx-action@v3

    # Build da imagem Docker do Backend (apenas em push)
    - name: Build Backend
      if: ${{ github.event_name == 'push' }}
      run: docker build -t contacts-backend-homolog:latest ./backend

    # Build da imagem Docker do Frontend (apenas em push)
    - name: Build Frontend
      if: ${{ github.event_name == 'push' }}
      run: |
        docker build -t contacts-frontend-homolog:latest \
          --build-arg REACT_APP_API_BASE_URL=http://contacts-backend-homolog:${{ secrets.BACKEND_PORT_DEV }}/api \
          ./frontend

    # Deploy das aplica√ß√µes no ambiente de homologa√ß√£o (apenas em push)
    - name: Deploy para homologa√ß√£o
      if: ${{ github.event_name == 'push' }}
      run: |
        docker stop contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true
        docker rm contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true
        docker run --restart unless-stopped -d --name contacts-db-homolog \
          -e POSTGRES_USER=${{ secrets.POSTGRES_USER_DEV }} \
          -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_DEV }} \
          -e POSTGRES_DB=${{ secrets.POSTGRES_DB_DEV }} \
          -v contacts_data_homolog:/var/lib/postgresql/data \
          postgres:13-alpine
        sleep 15
        docker run --restart unless-stopped -d --name contacts-backend-homolog \
          -p ${{ secrets.BACKEND_PORT_DEV }}:${{ secrets.BACKEND_PORT_DEV }} \
          --env PORT=${{ secrets.BACKEND_PORT_DEV }} \
          --env DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER_DEV }}:${{ secrets.POSTGRES_PASSWORD_DEV }}@contacts-db-homolog:5432/${{ secrets.POSTGRES_DB_DEV }} \
          --env JWT_SECRET=${{ secrets.JWT_SECRET_DEV }} \
          --env JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN_DEV }} \
          --link contacts-db-homolog:contacts-db-homolog \
          contacts-backend-homolog:latest
        docker run --restart unless-stopped -d --name contacts-frontend-homolog \
          -p 80:80 \
          --link contacts-backend-homolog:app \
          contacts-frontend-homolog:latest

    # =========================================================================
    # VERIFICA√á√ÉO E LIMPEZA
    # =========================================================================
    
    # Verifica o status do deploy (apenas em push)
    - name: Verificar deploy
      if: ${{ github.event_name == 'push' }}
      run: |
        echo "üìä Status do deploy:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        echo "üéâ Deploy de homologa√ß√£o conclu√≠do!"
        echo "üì¶ Vers√µes deployadas:"
        echo "   Frontend: ${{ steps.tag.outputs.frontend_version }}"
        echo "   Backend: ${{ steps.tag.outputs.backend_version }}"
        echo "   Tag: ${{ steps.tag.outputs.tag_name }}"

    # Limpa imagens n√£o utilizadas para economizar espa√ßo (apenas em push)
    - name: Limpeza
      if: ${{ github.event_name == 'push' }}
      run: docker image prune -f || true
