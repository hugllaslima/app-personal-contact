# =========================================================================
# WORKFLOW: Deploy para Ambiente de Homologa√ß√£o
# =========================================================================
# Este workflow executa valida√ß√µes em PRs para a branch develop,
# e realiza versionamento, build e deploy apenas em push para develop.
# =========================================================================

name: (CI/CD) Deploy Para Ambiente de Homologa√ß√£o

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened]

jobs:
  build-and-deploy:
    environment: app-personal-contact-develop
    runs-on: [self-hosted, develop-runner]

    steps:
    # =========================================================================
    # PREPARA√á√ÉO DO AMBIENTE
    # =========================================================================
    
    # Limpa o workspace para evitar conflitos com execu√ß√µes anteriores
    - name: Limpar workspace
      run: rm -rf ./* ./.* 2>/dev/null || true

    # Checkout do c√≥digo
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Configura o Git para realizar commits automatizados
    - name: Configurar Git
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions Bot"
        git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN_DEV }}@github.com/${{ github.repository }}.git

    # (Removido) Configura√ß√£o de branch local e versionamento

    # (Removido) Toda a l√≥gica de an√°lise de versionamento

    # =========================================================================
    # CONFIGURA√á√ÉO DE AMBIENTES
    # =========================================================================
    
    # (Removido) Setup Python (n√£o necess√°rio para build Docker)

    # (Removido) Setup Node (n√£o necess√°rio para build Docker)

    # (Removido) Toda a etapa de versionamento do frontend

    # (Removido) Toda a etapa de versionamento do backend
        
    # (Removido) Gerenciamento de tags

    # (Removido) Commit e cria√ß√£o de tags

    # =========================================================================
    # BUILD E DEPLOY
    # =========================================================================
    
    # Configura Docker Buildx para builds otimizados
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build da imagem Docker do Backend (apenas em push)
    - name: Build Backend
      if: ${{ github.event_name == 'push' }}
      run: docker build -t contacts-backend-homolog:latest ./backend

    # Build da imagem Docker do Frontend (apenas em push)
    - name: Build Frontend
      if: ${{ github.event_name == 'push' }}
      run: |
        docker build -t contacts-frontend-homolog:latest \
          --build-arg REACT_APP_API_BASE_URL=http://contacts-backend-homolog:${{ secrets.BACKEND_PORT_DEV }}/api \
          ./frontend

    # Deploy das aplica√ß√µes no ambiente de homologa√ß√£o (apenas em push)
    - name: Deploy para homologa√ß√£o
      if: ${{ github.event_name == 'push' }}
      run: |
        docker stop contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true
        docker rm contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true
        docker run --restart unless-stopped -d --name contacts-db-homolog \
          -e POSTGRES_USER=${{ secrets.POSTGRES_USER_DEV }} \
          -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_DEV }} \
          -e POSTGRES_DB=${{ secrets.POSTGRES_DB_DEV }} \
          -v contacts_data_homolog:/var/lib/postgresql/data \
          postgres:13-alpine
        sleep 15
        docker run --restart unless-stopped -d --name contacts-backend-homolog \
          -p ${{ secrets.BACKEND_PORT_DEV }}:${{ secrets.BACKEND_PORT_DEV }} \
          --env PORT=${{ secrets.BACKEND_PORT_DEV }} \
          --env DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER_DEV }}:${{ secrets.POSTGRES_PASSWORD_DEV }}@contacts-db-homolog:5432/${{ secrets.POSTGRES_DB_DEV }} \
          --env JWT_SECRET=${{ secrets.JWT_SECRET_DEV }} \
          --env JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN_DEV }} \
          --link contacts-db-homolog:contacts-db-homolog \
          contacts-backend-homolog:latest
        docker run --restart unless-stopped -d --name contacts-frontend-homolog \
          -p 80:80 \
          --link contacts-backend-homolog:app \
          contacts-frontend-homolog:latest

    # =========================================================================
    # VERIFICA√á√ÉO E LIMPEZA
    # =========================================================================
    
    # Verifica o status do deploy (apenas em push)
    - name: Verificar deploy
      if: ${{ github.event_name == 'push' }}
      run: |
        echo "üìä Status do deploy:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

    # Limpa imagens n√£o utilizadas para economizar espa√ßo (apenas em push)
    - name: Limpeza
      if: ${{ github.event_name == 'push' }}
      run: docker image prune -f || true
