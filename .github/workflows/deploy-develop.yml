name: Deploy Para Ambiente de Homologação

on:
  pull_request:
    branches: [develop]

jobs:
  build-and-deploy:
    environment: app-personal-contact-develop
    runs-on: [self-hosted, develop-runner]

    steps:
    - name: Limpar workspace do self-hosted runner
      run: |
        echo "🧹 Limpando workspace anterior..."
        rm -rf ./* ./.* 2>/dev/null || true
        echo "✅ Workspace limpo"

    - name: Checkout do código
      uses: actions/checkout@v4
      with: 
        fetch-depth: 0
        clean: true
        token: ${{ secrets.PAT_TOKEN }}

    - name: Configurar Git para versionamento
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions Bot"
        git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git

    - name: Configurar branch local corretamente
      run: |
        echo "🔧 Configurando branch local..."
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Branch do PR: $BRANCH_NAME"
        
        # Fetch todas as branches
        git fetch origin
        
        # Checkout para a branch do PR
        git checkout -B "$BRANCH_NAME" "origin/$BRANCH_NAME"
        
        # Configurar upstream
        git branch --set-upstream-to="origin/$BRANCH_NAME" "$BRANCH_NAME"
        
        echo "✅ Branch $BRANCH_NAME configurada"

    - name: Determinar tipo de versionamento baseado na branch
      id: version-type
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        echo "🔍 Analisando branch: $BRANCH_NAME"
        
        if [[ "$BRANCH_NAME" == feature/* ]]; then
          echo "type=minor" >> $GITHUB_OUTPUT
          echo "description=Nova funcionalidade" >> $GITHUB_OUTPUT
          echo "🆕 Detectado: Nova funcionalidade (MINOR)"
        elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "description=Correção de bug" >> $GITHUB_OUTPUT
          echo "🐛 Detectado: Correção (PATCH)"
        elif [[ "$BRANCH_NAME" == release/* ]]; then
          echo "type=major" >> $GITHUB_OUTPUT
          echo "description=Nova versão principal" >> $GITHUB_OUTPUT
          echo "🚀 Detectado: Release (MAJOR)"
        else
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "description=Atualização geral" >> $GITHUB_OUTPUT
          echo "⚙️ Detectado: Branch personalizada (PATCH)"
        fi

    - name: Configurar Python e Node.js
      run: |
        echo "🐍 Configurando Python..."
        python3 --version || echo "Python não encontrado"
        echo "📦 Configurando Node.js..."
        node --version || echo "Node.js não encontrado"

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # --- VERSIONAMENTO FRONTEND ---
    - name: Instalar dependências do frontend
      working-directory: ./frontend
      run: npm install

    - name: Configurar standard-version no frontend
      working-directory: ./frontend
      run: |
        if ! npm list standard-version > /dev/null 2>&1; then
          npm install --save-dev standard-version
          npm pkg set scripts.release="standard-version"
        fi

    - name: Versionamento Frontend (${{ steps.version-type.outputs.description }})
      working-directory: ./frontend
      run: |
        echo "📋 Aplicando versionamento ${{ steps.version-type.outputs.type }} no frontend..."
        npm run release -- ${{ steps.version-type.outputs.type }} --prerelease develop --skip.tag --no-verify

    # --- VERSIONAMENTO BACKEND ---
    - name: Instalar dependências do backend
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install bump2version
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi

    - name: Configurar .bumpversion.cfg no backend
      working-directory: ./backend
      run: |
        if [ ! -f ".bumpversion.cfg" ]; then
          cat > .bumpversion.cfg << 'EOF'
        [bumpversion]
        current_version = 0.1.0
        commit = True
        tag = False
        message = chore(release): bump backend to {new_version}

        [bumpversion:file:pyproject.toml]
        search = version = "{current_version}"
        replace = version = "{new_version}"
        EOF
        fi

    - name: Versionamento Backend (${{ steps.version-type.outputs.description }})
      working-directory: ./backend
      run: |
        echo "📋 Aplicando versionamento ${{ steps.version-type.outputs.type }} no backend..."
        CURRENT_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2 | head -1)
        bump2version --current-version "$CURRENT_VERSION" ${{ steps.version-type.outputs.type }} --allow-dirty

    # --- COMMIT E PUSH ---
    - name: Commit das alterações de versionamento
      run: |
        git add .
        if ! git diff --cached --quiet; then
          FRONTEND_VERSION=$(cd frontend && node -p "require('./package.json').version" 2>/dev/null || echo 'N/A')
          BACKEND_VERSION=$(cd backend && grep 'version = ' pyproject.toml | cut -d'"' -f2 | head -1 2>/dev/null || echo 'N/A')
          
          git commit -m "chore(release): [skip ci] ${{ steps.version-type.outputs.description }}

          📦 Versionamento automático:
          - Frontend: $FRONTEND_VERSION  
          - Backend: $BACKEND_VERSION
          - Tipo: ${{ steps.version-type.outputs.type }}
          - Branch: ${{ github.head_ref }}
          "
          echo "✅ Alterações commitadas"
        else
          echo "ℹ️ Nenhuma alteração para commitar"
        fi

    - name: Push das alterações para a branch do PR
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        echo "📤 Fazendo push para a branch: $BRANCH_NAME"
        
        # Push apenas para a branch do PR (REMOVIDO O MERGE AUTOMÁTICO)
        git push origin "$BRANCH_NAME"
        
        FRONTEND_VERSION=$(cd frontend && node -p "require('./package.json').version" 2>/dev/null || echo 'N/A')
        BACKEND_VERSION=$(cd backend && grep 'version = ' pyproject.toml | cut -d'"' -f2 | head -1 2>/dev/null || echo 'N/A')
        
        echo "✅ Versionamento concluído:"
        echo "   - Frontend: $FRONTEND_VERSION"
        echo "   - Backend: $BACKEND_VERSION"
        echo "   - Tipo: ${{ steps.version-type.outputs.description }}"
        echo ""
        echo "🔄 Próximo passo: Faça o merge do PR manualmente no GitHub"
        echo "🎯 As versões aparecerão automaticamente na branch develop após o merge"

    # --- DOCKER BUILD E DEPLOY ---
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker image
      run: |
        echo "🐍 Buildando Backend Python..."
        docker build -t contacts-backend-homolog:latest ./backend

    - name: Build Frontend Docker image  
      run: |
        echo "⚛️ Buildando Frontend..."
        docker build -t contacts-frontend-homolog:latest \
          --build-arg REACT_APP_API_BASE_URL=http://contacts-backend-homolog:${{ secrets.BACKEND_PORT_DEV }}/api \
          ./frontend

    - name: Deploy para homologação
      run: |
        echo "🚀 Fazendo deploy para homologação..."
        
        # Parar containers antigos
        docker stop contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true
        docker rm contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true

        # PostgreSQL
        docker run --restart unless-stopped -d --name contacts-db-homolog \
          -e POSTGRES_USER=${{ secrets.POSTGRES_USER_DEV }} \
          -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_DEV }} \
          -e POSTGRES_DB=${{ secrets.POSTGRES_DB_DEV }} \
          -v contacts_data_homolog:/var/lib/postgresql/data \
          postgres:13-alpine

        sleep 15

        # Backend
        docker run --restart unless-stopped -d --name contacts-backend-homolog \
          -p ${{ secrets.BACKEND_PORT_DEV }}:${{ secrets.BACKEND_PORT_DEV }} \
          --env PORT=${{ secrets.BACKEND_PORT_DEV }} \
          --env DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER_DEV }}:${{ secrets.POSTGRES_PASSWORD_DEV }}@contacts-db-homolog:5432/${{ secrets.POSTGRES_DB_DEV }} \
          --env JWT_SECRET=${{ secrets.JWT_SECRET_DEV }} \
          --env JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN_DEV }} \
          --link contacts-db-homolog:contacts-db-homolog \
          contacts-backend-homolog:latest

        # Frontend  
        docker run --restart unless-stopped -d --name contacts-frontend-homolog \
          -p 80:80 \
          --link contacts-backend-homolog:app \
          contacts-frontend-homolog:latest

    - name: Verificar deploy
      run: |
        echo "📊 Status do deploy:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        FRONTEND_VERSION=$(cd frontend && node -p "require('./package.json').version" 2>/dev/null || echo 'N/A')
        BACKEND_VERSION=$(cd backend && grep 'version = ' pyproject.toml | cut -d'"' -f2 | head -1 2>/dev/null || echo 'N/A')
        
        echo ""
        echo "🎉 Deploy de homologação concluído!"
        echo "📦 Versões deployadas:"
        echo "   Frontend: $FRONTEND_VERSION"
        echo "   Backend: $BACKEND_VERSION"
        echo "   Tipo: ${{ steps.version-type.outputs.description }}"
        echo ""
        echo "🔄 Próximos passos:"
        echo "   1. ✅ Testar a aplicação no ambiente de homologação"
        echo "   2. ✅ Fazer o merge manual do PR no GitHub"
        echo "   3. ✅ As versões irão automaticamente para a branch develop"

    - name: Limpeza
      run: |
        docker image prune -f || true
