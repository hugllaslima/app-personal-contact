# ==============================================================================
# WORKFLOW: Deploy para Ambiente de Homologação
# ==============================================================================
# Este workflow valida PRs direcionados à branch `develop`.
# Build e deploy usam imagens com tag baseada no SHA do commit.
# Observação: as etapas de build/deploy são executadas apenas após merge do PR.
# Para acionar deploy em `push` para `develop`, veja comentário na seção `on:`.
# Requisitos: runner self-hosted com Docker instalado e privilégios de execução.
# ==============================================================================

name: (CI/CD) Deploy Para Ambiente de Homologação

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened, closed]
 # =========================================================================
  # OBS: Atualmente este workflow só é acionado em `pull_request` para `develop`.
  # Se desejar executar build e deploy em `push` para `develop`, adicione:
  # push:
  #  branches: [develop]
  # =========================================================================

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    environment: app-personal-contact-develop
    runs-on: [self-hosted, develop-runner]
    permissions:
      contents: read
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    steps:
      - name: Limpar workspace
        run: rm -rf ./* ./.* 2>/dev/null || true
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

  build-and-deploy:
    environment: app-personal-contact-develop
    runs-on: [self-hosted, develop-runner]
    permissions:
      contents: read
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true

    steps:
    # =========================================================================
    # PREPARAÇÃO DO AMBIENTE
    # =========================================================================

    # Faz checkout do código do repositório
    - name: Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    # Configura Git no runner
    - name: Configurar Git
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions Bot"
        git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN_DEV }}@github.com/${{ github.repository }}.git
    
    # =========================================================================
    # BUILD E DEPLOY
    # =========================================================================

    # Configura Docker Buildx para builds otimizados
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Constrói imagem local do backend (tag latest)
    - name: Build Backend
      run: docker build -t contacts-backend-homolog:${{ github.event.pull_request.head.sha }} ./backend

    # Constrói imagem local do frontend (tag latest)
    - name: Build Frontend
      run: |
        docker build -t contacts-frontend-homolog:${{ github.event.pull_request.head.sha }} \
          --build-arg REACT_APP_API_BASE_URL=http://contacts-backend-homolog:${{ secrets.BACKEND_PORT_DEV }}/api \
          ./frontend

    # Realiza deploy no ambiente de homologação
    - name: Deploy para homologação
      run: |
        docker stop contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true
        docker rm contacts-frontend-homolog contacts-backend-homolog contacts-db-homolog || true
        docker run --restart unless-stopped -d --name contacts-db-homolog \
          -e POSTGRES_USER=${{ secrets.POSTGRES_USER_DEV }} \
          -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_DEV }} \
          -e POSTGRES_DB=${{ secrets.POSTGRES_DB_DEV }} \
          -v contacts_data_homolog:/var/lib/postgresql/data \
          postgres:13-alpine
        sleep 15
        docker run --restart unless-stopped -d --name contacts-backend-homolog \
          -p ${{ secrets.BACKEND_PORT_DEV }}:${{ secrets.BACKEND_PORT_DEV }} \
          --env PORT=${{ secrets.BACKEND_PORT_DEV }} \
          --env DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER_DEV }}:${{ secrets.POSTGRES_PASSWORD_DEV }}@contacts-db-homolog:5432/${{ secrets.POSTGRES_DB_DEV }} \
          --env JWT_SECRET=${{ secrets.JWT_SECRET_DEV }} \
          --env JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN_DEV }} \
          --link contacts-db-homolog:contacts-db-homolog \
          contacts-backend-homolog:${{ github.event.pull_request.head.sha }}
        docker run --restart unless-stopped -d --name contacts-frontend-homolog \
          -p 80:80 \
          --link contacts-backend-homolog:app \
          contacts-frontend-homolog:${{ github.event.pull_request.head.sha }}

    # =========================================================================
    # VERIFICAÇÃO E LIMPEZA
    # =========================================================================

    # Verifica containers ativos e portas expostas
    - name: Verificar deploy
      run: |
        echo "📊 Status do deploy:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

    # Remove imagens não utilizadas para liberar espaço
    - name: Limpeza
      run: docker image prune -f || true
